// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums actualizados en mayúsculas
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  APPLE
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum ComplaintPriority {
  HIGH
  MEDIUM
  LOW
}

enum Discipline {
  SICLO
  BARRE
  EJERCITO
  YOGA
}

// Modelo User actualizado (sin taxId, acceptsMarketing, Address)
model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  password            String?
  emailVerified       DateTime?
  image               String?
  role                UserRole      @default(USER)
  
  // Additional user information
  firstName           String?
  lastName            String?
  phone               String?
  company             String?
  
  // Auth fields
  authProvider        AuthProvider  @default(EMAIL)
  lastLogin           DateTime?
  failedLoginAttempts Int?          @default(0)
  lockedUntil         DateTime?
  isActive            Boolean       @default(true)
  
  // Timestamps
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  // Relaciones (cambiado de stores a branches)
  accounts            Account[]
  branches            Branch[]
  
  @@map("users")
}

// Modelo Account para OAuth
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([provider, providerAccountId])
  @@map("accounts")
}

// Modelo para verificación de email
model VerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  type       String   @default("email_verification")
  createdAt  DateTime @default(now())
  
  @@id([identifier, token])
  @@map("verification_tokens")
}

// Modelo para reset de contraseñas
model PasswordResetToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  @@id([identifier, token])
  @@map("password_reset_tokens")
}

// Modelo Branch (antes Store)
model Branch {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  address     String
  phone       String?
  email       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  users       User[]
  instructors Instructor[]
  complaints  Complaint[]
  ratings     Rating[]
  
  @@map("branches")
}

model Instructor {
  id         String     @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  email      String?
  phone      String?
  discipline Discipline
  branchId   String
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  // Relaciones
  branch     Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  ratings    Rating[]
  
  @@map("instructors")
}

model Complaint {
  id                     String            @id @default(dbgenerated("'SICLO-' || extract(epoch from now())::text || '-' || substr(gen_random_uuid()::text, 1, 8)"))
  fullName               String
  email                  String
  branchId               String
  observationType        String
  detail                 String
  priority               ComplaintPriority
  status                 ComplaintStatus   @default(PENDING)
  resolution             String?
  managerComments        String?
  attachments            Json              @default("[]")
  resolutionAttachments  Json              @default("[]")
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  
  // Relaciones
  branch                 Branch            @relation(fields: [branchId], references: [id])
  
  @@map("complaints")
}

model Rating {
  id                     String     @id @default(dbgenerated("'RATING-' || extract(epoch from now())::text || '-' || substr(gen_random_uuid()::text, 1, 8)"))
  instructorId           String
  branchId               String
  instructorName         String
  discipline             Discipline
  schedule               String
  date                   String
  instructorRating       Int
  cleanlinessRating      Int
  audioRating            Int
  attentionQualityRating Int
  amenitiesRating        Int
  punctualityRating      Int
  npsScore               Decimal    @db.Decimal(3, 1)
  comments               String?
  createdAt              DateTime   @default(now())
  
  // Relaciones
  instructor             Instructor @relation(fields: [instructorId], references: [id])
  branch                 Branch     @relation(fields: [branchId], references: [id])
  
  @@map("ratings")
}

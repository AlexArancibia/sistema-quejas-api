generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL") // uses a direct connection
}

// Enums para varios estados y tipos utilizados en todo el esquema
enum CurrencyPosition {
  BEFORE // Symbol appears before the amount (e.g., $100)
  AFTER  // Symbol appears after the amount (e.g., 100€)
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostType {
  BLOG
  NEWS
  PRODUCT_DESCRIPTION
  PAGE
}

enum OrderFinancialStatus {
  PENDING
  AUTHORIZED
  PARTIALLY_PAID
  PAID
  PARTIALLY_REFUNDED
  REFUNDED
  VOIDED
}

enum OrderFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
  PENDING_FULFILLMENT
  OPEN
  IN_PROGRESS
  ON_HOLD
  SCHEDULED
}

enum ProductStatus {
  DRAFT    // Product is not yet published
  ACTIVE   // Product is published and available
  ARCHIVED // Product is no longer available but kept for record
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  FREE_SHIPPING
}

enum PaymentProviderType {
  PAYPAL
  STRIPE
  MERCADOPAGO
  BANK_TRANSFER
  CASH_ON_DELIVERY
  CULQI
  IZIPAY
  NIUBIZ
  OTHER
}

enum ShippingMethodType {
  STANDARD
  EXPRESS
  OVERNIGHT
  FREE
  PICKUP
  CUSTOM
}

enum ContentType {
  ARTICLE
  BLOG
  PAGE
  NEWS
}

enum UserRole {
  ADMIN
  MANAGER
  EDITOR
  CUSTOMER_SERVICE
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  TWITTER
  APPLE
  GITHUB
  CUSTOM
}

// Modelo para usuarios (admin, managers, editors, etc.) con soporte para múltiples proveedores de autenticación
model User {
  id                String      @id @default(dbgenerated("'user_' || substr(gen_random_uuid()::text, 1, 13)"))
  email             String      @unique // Email address of the user
  emailVerified     DateTime?   // Fecha de verificación del email
  password          String?     // Hashed password (opcional para auth con proveedores externos)
  image             String?     // URL de la imagen de perfil
  firstName         String      // First name of the user
  lastName          String      // Last name of the user
  role              UserRole    // Role of the user in the system
  
  // Campos para autenticación con proveedores externos
  authProvider      AuthProvider @default(EMAIL) // Proveedor de autenticación
  authProviderId    String?      // ID único del usuario en el proveedor externo
  accessToken       String?      // Token de acceso (encriptado)
  refreshToken      String?      // Token de actualización (encriptado)
  tokenExpiresAt    DateTime?    // Fecha de expiración del token
  
  // Campos adicionales
  phone             String?      // Número de teléfono
  bio               String?      // Biografía o descripción
  preferences       Json?        // Preferencias del usuario (tema, notificaciones, etc.)
  lastLogin         DateTime?    // Última fecha de inicio de sesión
  failedLoginAttempts Int?       // Intentos fallidos de inicio de sesión
  lockedUntil       DateTime?    // Bloqueo temporal de cuenta
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relaciones multitenant
  stores            Store[]     // Tiendas que pertenecen a este usuario
  posts             Content[]
}

// Modelo para tiendas (multitenant)
model Store {
  id                String           @id @default(dbgenerated("'store_' || substr(gen_random_uuid()::text, 1, 13)"))
  name              String           // Nombre de la tienda
  slug              String           @unique // URL-friendly version of the name
  owner             User             @relation(fields: [ownerId], references: [id])
  ownerId           String           // ID del usuario propietario
  isActive          Boolean          @default(true)
  maxProducts       Int?             // Límite de productos según el plan
  planType          String?          // Plan de suscripción (free, basic, premium)
  planExpiryDate    DateTime?        // Fecha de expiración del plan
  apiKeys           Json?            // Claves API para integraciones
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relaciones con otros modelos
  settings          ShopSettings?
  categories        Category[]
  products          Product[]
  collections       Collection[]
  orders            Order[]
  shippingMethods   ShippingMethod[]
  paymentProviders  PaymentProvider[]
  coupons           Coupon[]
  contents          Content[]
  heroSections      HeroSection[]
  cardSections      CardSection[]
  teamSections      TeamSection[]
  frequentlyBoughtTogether FrequentlyBoughtTogether[]
}

// Modelo para almacenar configuraciones de la tienda
// Modelo para almacenar configuraciones de la tienda
// Modelo para almacenar configuraciones de la tienda
model ShopSettings {
  id                  String           @id @default(dbgenerated("'shop_' || substr(gen_random_uuid()::text, 1, 13)"))
  store               Store            @relation(fields: [storeId], references: [id])
  storeId             String           @unique // Relación con la tienda
  name                String           // Name of the shop
  domain              String           @unique // Domain of the shop's website
  email               String?          // Contact email for the shop
  shopOwner           String?          // Name of the shop owner
  logo                String?          // URL of the shop's logo
  logo2                String?          // URL of the shop's logo
  logo3                String?          // URL of the shop's logo
  description         String?          // Short description of the shop
  address1            String?          // First line of the shop's address
  address2            String?          // Second line of the shop's address
  city                String?          // City where the shop is located
  province            String?          // Province or state where the shop is located
  provinceCode        String?          // Code of the province or state
  country             String?          // Country where the shop is located
  countryCode         String?          // Code of the country
  zip                 String?          // Zip or postal code of the shop
  phone               String?          // Contact phone number for the shop
  
  // Currency Settings
  defaultCurrency     Currency         @relation("DefaultCurrency", fields: [defaultCurrencyId], references: [id])
  defaultCurrencyId   String           // Default currency used by the shop
  acceptedCurrencies  Currency[]       @relation("AcceptedCurrencies") // Currencies accepted by the shop
  multiCurrencyEnabled Boolean         @default(false) // Whether multiple currencies are supported

  // Shipping Settings
  shippingZones       String?          // Regions where the shop ships
  defaultShippingRate Decimal?         // Default shipping rate
  freeShippingThreshold Decimal?       // Minimum order amount for free shipping

  // Tax Settings
  taxesIncluded       Boolean          @default(false) // Whether prices include taxes
  taxValue            Decimal?         // Default tax value

  // Timezone & Measurement Settings
  timezone            String?          // Timezone of the shop
  weightUnit          String?          // Unit used for weight measurements

  // Branding & Theme
  primaryColor        String?          // Primary color code for branding
  secondaryColor      String?          // Secondary color code for branding
  theme               String?          // Shop's selected theme

  // Social Media
  facebookUrl         String?          // Facebook page URL
  instagramUrl        String?          // Instagram profile URL
  twitterUrl          String?          // Twitter profile URL
  tiktokUrl           String?          // TikTok profile URL
  youtubeUrl          String?          // YouTube channel URL

  // Analytics & Tracking
  googleAnalyticsId   String?          // Google Analytics tracking ID
  facebookPixelId     String?          // Facebook Pixel tracking ID

  // Support & Customer Service
  supportEmail        String?          // Support email address
  supportPhone        String?          // Support phone number
  liveChatEnabled     Boolean          @default(false) // Whether live chat is enabled

  // Status & Advanced Settings
  status              String           @default("active") // Shop status: active, inactive, suspended
  maintenanceMode     Boolean          @default(false) // Whether the shop is in maintenance mode
  multiLanguageEnabled Boolean         @default(false) // Whether multiple languages are supported
  
  // Campos adicionales
  cookieConsentEnabled Boolean?        // Consentimiento de cookies
  gdprCompliant       Boolean?         // Cumplimiento de GDPR
  ccpaCompliant       Boolean?         // Cumplimiento de CCPA
  enableWishlist      Boolean?         // Habilitar listas de deseos
  webhooks            Json?            // Webhooks configurados

  footerDescription String?

  // Timestamps
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // BaseCurrency relation removed
}

// Modelo para monedas soportadas por la tienda
model Currency {
  id                 String         @id @default(dbgenerated("'curr_' || substr(gen_random_uuid()::text, 1, 13)"))
  code               String         // ISO code of the currency (e.g., USD, EUR)
  name               String         // Full name of the currency
  symbol             String         // Symbol of the currency
  decimalPlaces      Int            @default(2) // Number of decimal places for the currency
  symbolPosition     CurrencyPosition @default(BEFORE) // Position of the currency symbol
  isActive           Boolean        @default(true) // Whether the currency is active
  autoUpdateRates    Boolean?       // Actualización automática de tasas
  updateFrequency    String?        // Frecuencia de actualización
  roundingPrecision  Int?           // Precisión de redondeo
  
  // Relations
  defaultForShops    ShopSettings[] @relation("DefaultCurrency")
  acceptedByShops    ShopSettings[] @relation("AcceptedCurrencies")
  // baseForShops relation removed
  
  fromExchangeRates  ExchangeRate[] @relation("FromCurrency")
  toExchangeRates    ExchangeRate[] @relation("ToCurrency")
  orders             Order[]
  paymentProviders   PaymentProvider[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  VariantPrice VariantPrice[]
  paymentTransactions PaymentTransaction[]
  ShippingMethodPrice ShippingMethodPrice[]
}

// Modelo para almacenar tipos de cambio entre monedas
model ExchangeRate {
  id               String   @id @default(dbgenerated("'exr_' || substr(gen_random_uuid()::text, 1, 13)"))
  fromCurrency     Currency @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  fromCurrencyId   String   // Currency being converted from
  toCurrency       Currency @relation("ToCurrency", fields: [toCurrencyId], references: [id])
  toCurrencyId     String   // Currency being converted to
  rate             Decimal  // Exchange rate
  effectiveDate    DateTime // Date from which this rate is effective
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([fromCurrencyId, toCurrencyId, effectiveDate])
}

// Modelo para categorías de productos
model Category {
  id           String     @id @default(dbgenerated("'cat_' || substr(gen_random_uuid()::text, 1, 13)"))
  store        Store      @relation(fields: [storeId], references: [id])
  storeId      String     // Relación con la tienda
  name         String     // Name of the category
  slug         String     // URL-friendly version of the name
  description  String?    // Description of the category
  imageUrl     String?
  parentId     String?    // ID of the parent category (for nested categories)
  parent       Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryToParent")
  products     Product[]  // Products belonging to this category
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  metaTitle    String?    // Meta title for SEO
  metaDescription String? // Meta description for SEO
  priority Int?

  Coupon Coupon[]

  @@unique([storeId, slug])
}

// Modelo para productos
model Product {
  id                String          @id @default(dbgenerated("'prod_' || substr(gen_random_uuid()::text, 1, 13)"))
  store             Store           @relation(fields: [storeId], references: [id])
  storeId           String          // Relación con la tienda
  title             String          // Title of the product
  description       String?         // Description of the product
  slug              String          // URL-friendly version of the title
  vendor            String?         // Vendor or brand of the product
  allowBackorder    Boolean         @default(false) 
  releaseDate       DateTime?
  status            ProductStatus   @default(DRAFT) // Current status of the product
  viewCount         Int?            // Contador de vistas
  restockThreshold  Int?            // Umbral para alertas de reposición
  restockNotify     Boolean?        // Notificar cuando se reponga
  categories        Category[]      // Categories the product belongs to
  variants          ProductVariant[] // Variants of the product
  imageUrls         String[]        // URLs of the product images
  collections       Collection[]    // Collections the product belongs to
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  metaTitle         String?         // Meta title for SEO
  metaDescription   String?         // Meta description for SEO

  coupon Coupon[]

  @@unique([storeId, slug])
  @@index([status, vendor])
}

// Modelo para variantes de productos
model ProductVariant {
  id                String        @id @default(dbgenerated("'var_' || substr(gen_random_uuid()::text, 1, 13)"))
  product           Product       @relation(fields: [productId], references: [id])
  productId         String        // ID of the parent product
  title             String        // Title of the variant
  sku               String?       // Stock Keeping Unit for the variant
  isActive          Boolean       @default(true)
  attributes        Json?         // JSON object containing variant attributes
  imageUrls          String[]     // URL of the variant's image
  prices            VariantPrice[] // Prices of the variant in different currencies
  inventoryQuantity Int           @default(0) // Available quantity of this variant
  weightValue       Decimal?      // Weight of the variant
  position          Int           @default(1) // Position of the variant in the list
  orderItems        OrderItem[]   // Order items referencing this variant
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relación con FrequentlyBoughtTogether
  frequentlyBoughtTogether FrequentlyBoughtTogether[]
}

// Modelo para precios de variantes en diferentes monedas
model VariantPrice {
  id         String         @id @default(dbgenerated("'vp_' || substr(gen_random_uuid()::text, 1, 13)"))
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  String         // ID of the variant this price is for
  currency   Currency       @relation(fields: [currencyId], references: [id])
  currencyId String         // ID of the currency for this price
  price      Decimal        // Price value
  originalPrice Decimal?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([variantId, currencyId])
}

// Modelo simplificado para productos frecuentemente comprados juntos
model FrequentlyBoughtTogether {
  id                String         @id @default(dbgenerated("'fbt_' || substr(gen_random_uuid()::text, 1, 13)"))
  store             Store          @relation(fields: [storeId], references: [id])
  storeId           String         // Relación con la tienda
  name              String         // Nombre del grupo
  
  // Relación muchos a muchos con variantes
  variants          ProductVariant[]
  
  // Campos de descuento
  discountName      String?        // Nombre del descuento
  discount          Decimal?       // Valor del descuento
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@unique([storeId, name])
}

// Modelo para pedidos
model Order {
  id                String                 @id @default(dbgenerated("'ord_' || substr(gen_random_uuid()::text, 1, 13)"))
  store             Store                  @relation(fields: [storeId], references: [id])
  storeId           String                 // Relación con la tienda
  orderNumber       Int                    // Unique number for the order
  customerInfo      Json                   // Información del cliente (email, nombre, teléfono, etc.)
  financialStatus   OrderFinancialStatus?  // Current financial status of the order
  fulfillmentStatus OrderFulfillmentStatus? // Current fulfillment status of the order
  currency          Currency               @relation(fields: [currencyId], references: [id])
  currencyId        String                 // This will store the currency code
  totalPrice        Decimal                // Total price of the order
  subtotalPrice     Decimal                // Subtotal price (before tax and discounts)
  totalTax          Decimal                // Total tax amount
  totalDiscounts    Decimal                // Total discounts applied
  lineItems         OrderItem[]            // Items in the order
  shippingAddress   Json?                  // Dirección de envío como JSON
  billingAddress    Json?                  // Dirección de facturación como JSON
  refunds           Refund[]               // Refunds associated with this order
  coupon            Coupon?                @relation(fields: [couponId], references: [id])
  couponId          String?                // ID of the coupon applied to this order
  paymentProvider   PaymentProvider?       @relation(fields: [paymentProviderId], references: [id])
  paymentProviderId String?                // ID of the payment provider used
  paymentStatus     PaymentStatus?         @default(PENDING)
  paymentDetails    Json?                  // Additional payment details (e.g., transaction ID, payment method details)
  shippingMethod    ShippingMethod?        @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId  String?                // ID of the shipping method used
  shippingStatus    ShippingStatus         @default(PENDING) // Current shipping status
  trackingNumber    String?                // Tracking number for the shipment
  trackingUrl       String?                // URL to track the shipment
  estimatedDeliveryDate DateTime?          // Estimated delivery date
  shippedAt         DateTime?              // Date when the order was shipped
  deliveredAt       DateTime?              // Date when the order was delivered
  customerNotes     String?                // Notes from the customer about the order
  internalNotes     String?                // Internal notes for staff (not visible to customer)
  source            String?                // Source of the order (e.g., "website", "mobile app", "phone")
  preferredDeliveryDate DateTime?          // Customer's preferred delivery date
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  paymentTransaction PaymentTransaction[]

  @@unique([storeId, orderNumber])
  @@index([financialStatus, fulfillmentStatus])
}

// Modelo para elementos de pedido
model OrderItem {
  id                 String    @id @default(dbgenerated("'oi_' || substr(gen_random_uuid()::text, 1, 13)"))
  order              Order     @relation(fields: [orderId], references: [id])
  orderId            String    // ID of the order this item belongs to
  variant            ProductVariant? @relation(fields: [variantId], references: [id])
  variantId          String?   // ID of the product variant (if applicable)
  title              String    // Title of the product
  quantity           Int       // Quantity ordered
  price              Decimal   // Price per unit at the time of order
  totalDiscount      Decimal   @default(0) // Total discount applied to this item
  refundLineItems    RefundLineItem[] // Refund line items for this order item
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// Modelo para reembolsos
model Refund {
  id            String          @id @default(dbgenerated("'ref_' || substr(gen_random_uuid()::text, 1, 13)"))
  order         Order           @relation(fields: [orderId], references: [id])
  orderId       String          // ID of the order this refund belongs to
  amount        Decimal         // Total amount refunded
  note          String?         // Note about the refund
  restock       Boolean         @default(false) // Whether items were restocked
  processedAt   DateTime?       // When the refund was processed
  lineItems     RefundLineItem[] // Line items included in this refund
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Modelo para elementos de línea de reembolso
model RefundLineItem {
  id            String    @id @default(dbgenerated("'rli_' || substr(gen_random_uuid()::text, 1, 13)"))
  refund        Refund    @relation(fields: [refundId], references: [id])
  refundId      String    // ID of the refund this line item belongs to
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId   String    // ID of the order item being refunded
  quantity      Int       // Quantity being refunded
  amount        Decimal   // Amount refunded for this line item
  restocked     Boolean   @default(false) // Whether this item was restocked
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo para colecciones de productos
model Collection {
  id          String    @id @default(dbgenerated("'col_' || substr(gen_random_uuid()::text, 1, 13)"))
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     String    // Relación con la tienda
  title       String    // Title of the collection
  description String?   // Description of the collection
  slug        String    // URL-friendly version of the title
  products    Product[] // Products in this collection
  imageUrl    String?   // URL of the collection's image
  createdAt   DateTime  @default(now())
  isFeatured  Boolean   @default(false)
  updatedAt   DateTime  @updatedAt
  metaTitle   String?   // Meta title for SEO
  metaDescription String? // Meta description for SEO

  Coupon Coupon[]

  @@unique([storeId, slug])
}

model Country {
  id          String   @id @default(dbgenerated("'country_' || substr(gen_random_uuid()::text, 1, 8)"))
  code        String   @unique // Código ISO 3166-1 Alpha-2: "PE", "US", "CO"
  code3       String   @unique // Código ISO 3166-1 Alpha-3: "PER", "USA", "COL"
  name        String   // "Peru", "United States", "Colombia"
  nameLocal   String?  // "Perú" (nombre en idioma local)
  phoneCode   String?  // "+51", "+1", "+57"
  currency    String?  // "PEN", "USD", "COP"
  
  states      State[]
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([code])
  @@index([isActive])
}

model State {
  id          String   @id @default(dbgenerated("'state_' || substr(gen_random_uuid()::text, 1, 8)"))
  country     Country  @relation(fields: [countryCode], references: [code])
  countryCode String   // "PE", "US"
  
  code        String   // Código estándar: "LIM", "CA", "NY"
  name        String   // "Lima", "California", "New York"
  nameLocal   String?  // Nombre local si es diferente
  type        String   @default("state") // "state", "province", "region", "department"
  
  cities      City[]
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([countryCode, code])
  @@index([countryCode, isActive])
}

model City {
  id          String   @id @default(dbgenerated("'city_' || substr(gen_random_uuid()::text, 1, 8)"))
  state       State    @relation(fields: [stateId], references: [id])
  stateId     String
  
  name        String   // "Lima", "Miraflores", "Los Angeles"
  nameLocal   String?  // Nombre local
  postalCode  String?  // Código postal principal si aplica
  latitude    Decimal? // Para cálculos de distancia futuros
  longitude   Decimal?
  
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([stateId, isActive])
  @@index([name]) // Para búsquedas
}

// TUS MODELOS ORIGINALES
model ShippingMethod {
  id          String             @id @default(dbgenerated("'sm_' || substr(gen_random_uuid()::text, 1, 13)"))
  store       Store              @relation(fields: [storeId], references: [id])
  storeId     String
  name        String
  description String?
  prices      ShippingMethodPrice[]
  estimatedDeliveryTime String?
  minDeliveryDays       Int?                // Número mínimo de días para entrega
  maxDeliveryDays       Int?                // Número máximo de días para entrega
  
  isActive    Boolean            @default(true)
  availableDays String[] @default(["mon", "tue", "wed", "thu", "fri", "sat", "sun"])
  cutOffTime  String?            // Hora límite para pedidos hoy (ej. "15:00")

  orders      Order[]
  minWeight   Decimal? @default(0)         // Peso mínimo para aplicar este método
  maxWeight   Decimal?
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

// MODELO MEJORADO CON REFERENCIAS ESTÁNDAR
model ShippingMethodPrice {
  id               String        @id @default(dbgenerated("'smp_' || substr(gen_random_uuid()::text, 1, 13)"))
  shippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId String
  currency         Currency       @relation(fields: [currencyId], references: [id])
  currencyId       String
  price            Decimal
  
  // INFORMACIÓN DE ZONA
  zoneName         String?       // "Lima Metropolitana", "Costa Este USA"
  zoneDescription  String?
  
  // REFERENCIAS GEOGRÁFICAS ESTÁNDAR (usando códigos ISO)
  countryCodes     String[]      @default([]) // ["PE", "CO"] - ISO codes
  stateCodes       String[]      @default([]) // ["LIM", "CA"] - códigos de estados
  cityNames        String[]      @default([]) // ["Lima", "Miraflores"] - nombres de ciudades
  
  // CÓDIGOS POSTALES (flexible para diferentes formatos)
  postalCodes      String[]      @default([]) // ["15001", "90210", "SW1A 1AA"]
  postalCodePatterns String[]    @default([]) // ["150*", "902*", "SW1A*"]
  
  // CONFIGURACIÓN AVANZADA
  pricePerKg       Decimal?      @default(0)
  freeWeightLimit  Decimal?      @default(0)
  zonePriority     Int           @default(0)
  isZoneActive     Boolean       @default(true)

  freeShippingThreshold Decimal?            // Monto mínimo de pedido para envío gratis
  freeShippingMessage   String?             // Mensaje promocional (ej. "Envío gratis en pedidos > $50")
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([shippingMethodId, currencyId, zonePriority])
}

// Modelo para proveedores de pago
model PaymentProvider {
  id          String              @id @default(dbgenerated("'pp_' || substr(gen_random_uuid()::text, 1, 13)"))
  store       Store               @relation(fields: [storeId], references: [id])
  storeId     String              // Relación con la tienda
  name        String              // Name of the payment provider
  type        PaymentProviderType // Type of payment provider
  description String?             // Description of the payment provider
  isActive    Boolean             @default(true) // Whether the provider is active
  credentials Json?               // Credentials for connecting to the provider (encrypted)
  minimumAmount Decimal?          // Monto mínimo de transacción
  maximumAmount Decimal?          // Monto máximo de transacción
  testMode     Boolean?           // Si está en modo de prueba
  imgUrl       String?            // URL de la imagen del proveedor
  orders      Order[]             // Orders processed by this provider
  currency    Currency            @relation(fields: [currencyId], references: [id]) // Relation to Currency model
  currencyId  String              // Foreign key for Currency
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  PaymentTransaction PaymentTransaction[]
}

model Coupon {
  id                  String       @id @default(dbgenerated("'coup_' || substr(gen_random_uuid()::text, 1, 13)"))
  store               Store        @relation(fields: [storeId], references: [id])
  storeId             String       // Relación con la tienda
  code                String       // Código del cupón
  description         String?
  type                DiscountType
  value               Decimal
  minPurchase         Decimal?
  maxUses             Int?
  usedCount           Int          @default(0)
  startDate           DateTime
  endDate             DateTime
  isActive            Boolean      @default(true)
  applicableProducts  Product[]    // Products to which the coupon can be applied
  applicableCategories Category[]  // Categories to which the coupon can be applied
  applicableCollections Collection[] // Collections to which the coupon can be applied
  orders              Order[]      // Orders that used this coupon
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@unique([storeId, code])
}

model PaymentTransaction {
  id                String   @id @default(dbgenerated("'pt_' || substr(gen_random_uuid()::text, 1, 13)"))
  order             Order    @relation(fields: [orderId], references: [id])
  orderId           String
  paymentProvider   PaymentProvider @relation(fields: [paymentProviderId], references: [id])
  paymentProviderId String
  amount            Decimal
  currency          Currency @relation(fields: [currencyId], references: [id])
  currencyId        String
  status            PaymentStatus   // e.g., "pending", "completed", "failed"
  transactionId     String?  // ID provided by the payment gateway
  paymentMethod     String?  // e.g., "credit_card", "bank_transfer"
  errorMessage      String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Content {
  id          String    @id @default(dbgenerated("'cnt_' || substr(gen_random_uuid()::text, 1, 13)"))
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     String    // Relación con la tienda
  title       String
  slug        String    
  body        String?
  type        ContentType
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id])
  category    String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  featuredImage String?
  metadata    Json?     // SEO metadata, tags, categories, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([storeId, slug])
}
 
model HeroSection {
  id                String   @id @default(dbgenerated("'hero_' || substr(gen_random_uuid()::text, 1, 13)"))
  store             Store    @relation(fields: [storeId], references: [id])
  storeId           String   // Relación con la tienda
  title             String
  subtitle          String?
  backgroundImage   String?
  mobileBackgroundImage String?
  backgroundVideo   String?
  mobileBackgroundVideo String? 
  buttonText        String?
  buttonLink        String?
  styles            Json?     // Stores alignment, colors, opacity, etc.
  metadata          Json?     // SEO metadata, tags, categories, etc.
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CardSection {
  id                String   @id @default(dbgenerated("'cs_' || substr(gen_random_uuid()::text, 1, 13)"))
  store             Store    @relation(fields: [storeId], references: [id])
  storeId           String   // Relación con la tienda
  title             String
  subtitle          String?
  description       String?
  layout            String?  // grid, carousel, masonry, etc.
  backgroundColor   String?
  textColor         String?
  maxCards          Int?     // Número máximo de tarjetas a mostrar
  cards             Card[]   // Relación con las tarjetas
  isActive          Boolean  @default(true)
  position          Int      @default(0) // Para ordenar múltiples secciones
  styles            Json?    // Estilos adicionales (padding, margin, etc.)
  metadata          Json?    // Metadatos SEO, tags, etc.
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Card {
  id                String      @id @default(dbgenerated("'card_' || substr(gen_random_uuid()::text, 1, 13)"))
  title             String
  subtitle          String?
  description       String?
  imageUrl          String?
  linkUrl           String?
  linkText          String?
  backgroundColor   String?
  textColor         String?
  position          Int         @default(0) // Para ordenar las tarjetas dentro de una sección
  cardSection       CardSection @relation(fields: [cardSectionId], references: [id])
  cardSectionId     String
  styles            Json?       // Estilos adicionales (border, shadow, etc.)
  metadata          Json?       // Datos adicionales específicos de la tarjeta
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Nueva tabla para secciones de equipo en el frontend
model TeamSection {
  id                String       @id @default(dbgenerated("'team_' || substr(gen_random_uuid()::text, 1, 13)"))
  store             Store        @relation(fields: [storeId], references: [id])
  storeId           String       // Relación con la tienda
  title             String       // Título de la sección (ej: "Nuestro Equipo")
  subtitle          String?      // Subtítulo opcional
  description       String?      // Descripción de la sección
  layout            String?      // Tipo de layout (grid, carousel, etc.)
  backgroundColor   String?      // Color de fondo
  textColor         String?      // Color del texto
  isActive          Boolean      @default(true)
  position          Int          @default(0) // Posición en la página
  styles            Json?        // Estilos adicionales (padding, margin, etc.)
  members           TeamMember[] // Miembros del equipo en esta sección
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

// Nueva tabla para miembros del equipo
model TeamMember {
  id                String      @id @default(dbgenerated("'tm_' || substr(gen_random_uuid()::text, 1, 13)"))
  teamSection       TeamSection @relation(fields: [teamSectionId], references: [id])
  teamSectionId     String      // Relación con la sección de equipo
  name              String      // Nombre del miembro
  position          String      // Cargo o posición (ej: "CEO", "Diseñador")
  imageUrl          String?     // URL de la foto
  bio               String?     // Biografía o descripción
  email             String?     // Email de contacto
  phone             String?     // Teléfono de contacto
  order             Int         @default(0) // Orden de aparición
  
  // Redes sociales
  linkedinUrl       String?     // URL de LinkedIn
  twitterUrl        String?     // URL de Twitter
  facebookUrl       String?     // URL de Facebook
  instagramUrl      String?     // URL de Instagram
  
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}
